name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    types: [closed]

permissions:
  contents: read

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    #1. gradlew 실행 권한 설정
    - name: Set execute permissions on gradlew
      run: chmod +x ./gradlew

    #2. 기존 application.properties 파일 제거
    - name: Remove existing application.properties
      run: rm -f src/main/resources/application.properties

    #3. secrets에서 application.properties 파일 생성
    - name: Create application.properties from secret
      run: |
        echo "spring.application.name=POPFLIX-backend" > src/main/resources/application.properties
        echo "spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver" >> src/main/resources/application.properties
        echo "spring.datasource.url=${{ secrets.DB_URL }}" >> src/main/resources/application.properties
        echo "spring.datasource.username=${{ secrets.DB_USERNAME }}" >> src/main/resources/application.properties
        echo "spring.datasource.password=${{ secrets.DB_PASSWORD }}" >> src/main/resources/application.properties
        echo "spring.jpa.show-sql=true" >> src/main/resources/application.properties
        echo "spring.jpa.hibernate.ddl-auto=update" >> src/main/resources/application.properties
        echo "spring.jpa.properties.hibernate.format_sql=true" >> src/main/resources/application.properties
        echo "spring.batch.job.enabled=false" >> src/main/resources/application.properties
        
    #4. 테스트 단계를 제외한 Gradle 빌드
    - name: Build with Gradle
      run: ./gradlew clean build -x test

    #5. Docker 이미지 빌드
    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/test .

    #6. Docker 로그인
    - name: Docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    #7. Docker 이미지 푸시
    - name: Push Docker image to DockerHub
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/test
